@{group 0 binding 0} (var [uniform] dimensions: vec2f)
@{group 0 binding 1} (var [uniform] time: f32)

(struct VertexInput
        @{location 0} corner-position: vec2f)

(struct VertexOutput
        @{builtin position} vertex-pos vec4f)

@vertex
(fn vertex [in: VertexInput]: VertexOutput
  (VertexOutput (vec4f in.corner-position 0. 1.)))

@fragment
(fn fragment [in: VertexOutput]: @{location 0} vec4f
  (let [pos (/ in.vertex-pos.xy dimensions)
        osc (-> time
                (* 9.)
                sin
                (* 0.5)
                (+ 0.5))]
    (vec4f (pow (vec3f pos osc)
                (vec3f 2.2))
           1.)))
