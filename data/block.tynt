@{group 0 binding 0} (var [uniform] dimensions: vec2f)
@{group 0 binding 1} (var [uniform] time: f32)

(struct VertexInput
        @{location 0} corner-position: vec2f)

(struct VertexOutput
        @{builtin position} vertex-pos: vec4f)

@vertex
(def vertex
  (fn [in: VertexInput]: VertexOutput
    (let [a (vec2f (.corner-position in))]
      (let [b (.x a)
            c (.y a)]
        (VertexOutput (vec4f b c 0. 1.))))))

@fragment
(def fragment 
  (fn [in: VertexOutput]: @{location 0} vec4f
    (vec2f 5. 2.)
    (let [a (vec2f 0. 0.)]
      (block
       (vec2f 0. 0.)
       (vec3f 1. 0. 0.)
       (vec4f (vec3f 0. 0. 0.) (.x a))))))
