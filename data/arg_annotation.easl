(struct VertexOut
  @{builtin position} pos: vec4f)

@fragment
(defn f [@{builtin front-facing} a: bool b: VertexOut]: @{location 0} vec4f
  (vec4f 1.))

@fragment
(defn f1 [@builtin front-facing: bool b: VertexOut]: @{location 0} vec4f
  (vec4f 1.))

; should fail because front-facing has the wrong type
#_@fragment
(defn f2 [@builtin front-facing: f32 b: VertexOut]: @{location 0} vec4f
  (vec4f 1.))

; should fail because builtin is duplicated
#_@fragment
(defn f3 [@{builtin front-facing} a: bool @{builtin front-facing} b: bool c: VertexOut]: @{location 0} vec4f
  (vec4f 1.))

; should fail because this builtin is only allowed in fragments
#_@vertex
(defn v [@builtin front-facing: bool]: VertexOut
  (VertexOut (vec4f 1.)))

; should fail because you can't use this outside of an entry point
#_(defn f4 [@{builtin front-facing} a: f32]: f32
  a)

; should fail because that's not a valid annotation
#_(defn f5 [@blah-blah-blah a: f32]: f32
  a)

; should fail because that's not a valid annotation
#_(defn f6 [@{blah bleh} a: f32]: f32
  a)
