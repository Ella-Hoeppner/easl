@{group 0
  binding 0
  address uniform}
(var dimensions: vec2f)

@{group 0
  binding 1
  address uniform}
(var time: f32)

(struct VertexInput
  @{location 0} corner-position: vec2f)

(struct VertexOutput
  @{builtin position} vertex-pos: vec4f)

@vertex
(defn vertex [in: VertexInput]: VertexOutput
  (let [a (.corner-position in)]
    (let [b (.x a)
          c (.y a)]
      (VertexOutput (vec4 b c 0. 1.)))))

@fragment
(defn fragment [in: VertexOutput]: @{location 0} vec4f
  (vec2 5. 2.): vec2f
  (let [a (vec2 0. 0.): vec2f]
    (do (vec2 0. 0.): vec2f
        (vec3 1. 0. 0.): vec3f
        (vec4 (vec3 0. 0. 0.): vec3f
              (.x a)))))
