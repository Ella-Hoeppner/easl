(struct VertexOutput
  @{location 0} x: f32
  @{builtin position} pos: vec4f)

@fragment
(defn f [in: VertexOutput]: @{location 0} vec4f
  (discard))

; uncommenting this should cause an error, as the `discard` can't be called with
; arguments
#_@fragment
  (defn f2 [in: VertexOutput]: @{location 0} vec4f
    (discard 2))

; uncommenting this should cause an error, as the `discard` effect is only
; allowed in fragment shaders
#_@vertex
  (defn v [@{builtin vertex-index}
           vertex-index: u32]: VertexOutput
    discard)

; you're allowed to use `discard` in non-entry functions
(defn discard-or-double [x: f32]: f32
  (if (< x 0.)
    (discard)
    (* x 2.)))

; helper functions that call discard may be used from fragment entry points
@fragment
(defn f3 [in: VertexOutput]: @{location 0} vec4f
  (vec4f (discard-or-double in.x)))

; however, helper functions that call discard may not be used from non-fragment
; entry points
#_@vertex
  (defn v2 [@{builtin vertex-index}
            vertex-index: u32]: VertexOutput
    (VertexOutput (discard-or-double 0.)
                  (vec4f 0.)))
